@using APS.Helpers
@using APS.Methods.Profit
@using Kendo.Mvc.UI
@using APS.Resources
@{
    Layout = "_Layout";
    ViewBag.Title = Label.Rapport;
}
@section Scripts {
    <script language="jscript">
        $(document).ready(function () {
            $("#tabstrip").kendoTabStrip({
                animation: { open: { effects: "fadeIn" } }
            });

            //tests
            //var chart = $("#Ware").data("kendoChart");
            //chart.dataSource.filter({ field: "Year", operator: "gte", value: 2020 });
            //chart.refresh();
        });
        function chartshDataBound(e) {
            var axis = e.sender.options.categoryAxis;
            axis.categories = axis.categories.sort();
        }
    </script>
    <script src="~/js/CommonScripts.js"></script>
}        
@section Styles
{
    <style>
        #tabstrip {
            height: 510px;
        }
        .k-content {
            border-color: rgba(0,0,0,.08);
            color: #656565;
            background-color: #fff;
        }
        .k-content {
            outline: 0;
        }
    </style>
}

<div class="content grid-wrapper">
    <h2>@ViewBag.Title</h2>
    <div id="tabstrip">
        <ul>
            <li class="k-state-active">
                Ware
            </li>
            <li>
                Ships
            </li>
            <li>
                Ship Performance
            </li>
        </ul>

        <div class="grid-wrapper">

            @(Html.Kendo().Chart<ChartWareVM>()
                .Name("chartWare")
                .Title("Ware")
                .DataSource(dataSource => dataSource
                    .Read(read => read.Action("ReadTradeOperation", "Chart"))
                    .Sort(sort =>
                    {
                        sort.Add(model => model.TimeRounded);
                    })
                )
                .SeriesDefaults(s=> s.Line()
                    .Style(ChartLineStyle.Smooth)
                    //.CategoryField("Ware")
                    .MissingValues(ChartAreaMissingValues.Zero)
                    //.Stack(true)
                )
                .Series(series => {
                    series.Line(model => model.Money).Name("Money");
                    series.Line(model => model.EstimatedProfit).Name("EstimatedProfit");
                    series.Line(model => model.Quantity).Name("Quantity");
                })
                .Legend(legend => legend
                    .Position(ChartLegendPosition.Bottom)
                )
                .CategoryAxis(axis => axis
                    //.Type(ChartCategoryAxisType.Category)
                    //.BaseUnit(ChartAxisBaseUnit.Fit)
                    .Field("TimeRounded")
                    //.Labels(labels => labels.Format("yyyy-MM"))
                    .Line(line => line.Visible(false))
                    .MajorGridLines(lines => lines.Visible(false))
                ))
            hoping to have a chart with all wares here showing their performance
            with a ship filter and hour from to filter as well
        </div>
        <div class="grid-wrapper">
            hoping to have a chart with all ships here showing their performance
            with a ware filter and hour from to filter as well
            @(Html.Kendo().Chart<ChartShipVM>()
                .Name("chartsh")
                .Title("Ships")
                .DataSource(dataSource => dataSource
                    .Read(read => read.Action("ReadShip", "Chart"))
                    .Group(group => group.Add(model => model.Ship))
                    .Sort(sort => sort.Add(model => model.TimeRounded).Ascending())
                )
                .Events(e => e.DataBound("chartshDataBound"))
                .SeriesDefaults(s=> s.Line()
                    .Style(ChartLineStyle.Smooth)
                    .MissingValues(ChartAreaMissingValues.Zero)
                )
                .Series(series => {
                      series.Line(model => model.EstimatedProfit)
                          .Name("#= group.value #").CategoryField("TimeRounded")
                          .Tooltip(t =>
                              t.Visible(true).Template("#= dataItem.Ship # - #= dataItem.EstimatedProfit #$")

                          );
                })
                .Legend(legend => legend
                    .Position(ChartLegendPosition.Bottom)
                )
                .ValueAxis(axis => axis.Numeric()
                    .Labels(labels => labels
                        .Format("${0}")
                        .Skip(2)
                        .Step(2)
                    )
                )
                //.CategoryAxis(axis => axis
                //.Labels(labels => labels.Format("MMM"))
                //)
                )


        </div>
        <div class="grid-wrapper">
            only shows ships that have performed a trade in the log, filters by "Last X Hours activity"
            to filter enter the exact sector or ware ID
            @(Html.Kendo().Grid<ShipSummaryVM>()
                .Name("Grid")
                .Events(e => { e.ExcelExport("resetGridAfterExport"); })
                .Columns(columns =>
                {
                    columns.Bound(c => c.LastActivity).Title("Last Hours");
                    columns.Bound(c => c.Sector);
                    columns.Bound(c => c.ItemSoldId).Title("Ware");
                    columns.Bound(c => c.OurShipId).Title("Ship ID");
                    columns.Bound(c => c.Quantity);
                    columns.Bound(c => c.EstimatedProfit).Format("{0:c0}").Width(181).HtmlAttributes(new { style = "text-align:right"});
                })
                .StandardGridConfiguration()
                .ToolBar(t =>
                {
                    t.Custom().Text("Export Excel").HtmlAttributes(new {href = "#", onclick = "exportToExcel()"});
                }).Excel(excel => excel.AllPages(true).Filterable(true))
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .ServerOperation(true)
                    .Events(events =>
                    {
                        events.Error("errorHandler");
                        events.RequestEnd("saveHandler");
                    })
                    .Read(read => read.Action("ReadShipPerformance", "Chart", new {Area = "Profit"}))
                    .PageSize(100)
                    .Sort(s => s.Add(x => x.EstimatedProfit).Ascending())
                ))
        </div>
    </div>
</div>
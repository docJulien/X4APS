<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddFile" xml:space="preserve">
    <value>Error adding file</value>
  </data>
  <data name="AjoutRoles" xml:space="preserve">
    <value>Error adding role</value>
  </data>
  <data name="ChampLongeurMinMax" xml:space="preserve">
    <value>Field {0} must have minimum {1} and maximum {2} characters.</value>
  </data>
  <data name="ChampLongueurMax" xml:space="preserve">
    <value>Field {0} must be maximum {1} characters.</value>
  </data>
  <data name="ChampObligatoire" xml:space="preserve">
    <value>Field {0} is mandatory</value>
  </data>
  <data name="ChampsDifferents" xml:space="preserve">
    <value>'{0}' and '{1}' must be identical</value>
  </data>
  <data name="ChangementMotPasseIncorrect" xml:space="preserve">
    <value>Incorrect of invalid password</value>
  </data>
  <data name="ConnectionIncorrect" xml:space="preserve">
    <value>Connection attempt failed</value>
  </data>
  <data name="CourrielInvalide" xml:space="preserve">
    <value>Email format is invalid</value>
  </data>
  <data name="Create" xml:space="preserve">
    <value>Creation returned an error</value>
  </data>
  <data name="CreationUtilisateur" xml:space="preserve">
    <value>An error occurred creating the user</value>
  </data>
  <data name="DateInferieur" xml:space="preserve">
    <value>'{0}' is smaller than {1}</value>
  </data>
  <data name="DateInferieureAujourdhui" xml:space="preserve">
    <value>'{0}' must be lower than today's date</value>
  </data>
  <data name="DateSQL" xml:space="preserve">
    <value>'{0}' is an invalid date</value>
  </data>
  <data name="DateSuperieurOuEgalAncienne" xml:space="preserve">
    <value>'{0}' must be superior to the previous date</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Deletion returned an error</value>
  </data>
  <data name="Doublons" xml:space="preserve">
    <value>Impossible to have two identical {0} </value>
  </data>
  <data name="FileSize" xml:space="preserve">
    <value>Maximum file size is 200 Mo</value>
  </data>
  <data name="FileType" xml:space="preserve">
    <value>Accepted file types is restricted to those listed below</value>
  </data>
  <data name="Format" xml:space="preserve">
    <value>'{0}' must have the format: {1}</value>
  </data>
  <data name="FormatUsername" xml:space="preserve">
    <value>The username is alphabetic characters only</value>
  </data>
  <data name="Generale" xml:space="preserve">
    <value>An error occurred</value>
  </data>
  <data name="Generique" xml:space="preserve">
    <value>*** No Res found in Errors.resx ***</value>
  </data>
  <data name="GetExportationGrille" xml:space="preserve">
    <value>Exporting returned an error</value>
  </data>
  <data name="LongueurMinimum" xml:space="preserve">
    <value>'{0}' must have {1} caracters</value>
  </data>
  <data name="NomFichierTropLong" xml:space="preserve">
    <value>File name is too long</value>
  </data>
  <data name="NouveauMotPasseDifferent" xml:space="preserve">
    <value>Passwords don't match</value>
  </data>
  <data name="OuExclusif" xml:space="preserve">
    <value>'{0}' and '{1}' are exclusive</value>
  </data>
  <data name="PageNotFound" xml:space="preserve">
    <value>Page not found</value>
  </data>
  <data name="PlageInvalide" xml:space="preserve">
    <value>'{0}' must be between {1} et {2}</value>
  </data>
  <data name="PropertyValueInvalid" xml:space="preserve">
    <value>Value '{0}' is invalid for '{1}'</value>
  </data>
  <data name="Rapport" xml:space="preserve">
    <value>Report error occurred</value>
  </data>
  <data name="Read" xml:space="preserve">
    <value>Reading error occurred</value>
  </data>
  <data name="Requis" xml:space="preserve">
    <value>'{0}' required</value>
  </data>
  <data name="RequisDependant" xml:space="preserve">
    <value>'{0}' required when '{1}' is used</value>
  </data>
  <data name="RequisOu" xml:space="preserve">
    <value>'{0}' or '{1}' required</value>
  </data>
  <data name="Sauvegarde" xml:space="preserve">
    <value>Error while saving</value>
  </data>
  <data name="SauvegardeUtilisateur" xml:space="preserve">
    <value>Error saving user</value>
  </data>
  <data name="SuperieurOuEgal" xml:space="preserve">
    <value>'{0}' must be larger or eqal to '{1}'</value>
  </data>
  <data name="SuppressionRoles" xml:space="preserve">
    <value>Error deleting role</value>
  </data>
  <data name="Update" xml:space="preserve">
    <value>Error updating</value>
  </data>
  <data name="UsagerExisteDeja" xml:space="preserve">
    <value>User already exists</value>
  </data>
  <data name="UsagerMotPasseIncorrect" xml:space="preserve">
    <value>Password or User invalid</value>
  </data>
</root>